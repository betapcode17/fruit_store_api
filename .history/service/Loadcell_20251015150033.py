from flask import Flask, request, jsonify
from flask_socketio import SocketIO, emit
import threading
import time

app = Flask(__name__)
socketio = SocketIO(app, cors_allowed_origins="*")

current_weight = None
lock = threading.Lock()
SEND_INTERVAL = 1  # g·ª≠i d·ªØ li·ªáu m·ªói 1 gi√¢y

@app.route('/weight', methods=['POST'])
def receive_weight():
    """
    Nh·∫≠n d·ªØ li·ªáu t·ª´ ESP8266 (POST JSON: {"weight": 2.5})
    """
    global current_weight
    data = request.get_json()
    weight = data.get('weight')

    if weight is None:
        return jsonify({"error": "Missing weight"}), 400

    with lock:
        current_weight = weight

    print("=" * 40)
    print(f"üì¶ Nh·∫≠n t·ª´ ESP8266: {weight} kg")
    print("=" * 40)

    return jsonify({"status": "ok", "received": weight}), 200


@app.route('/weight', methods=['GET'])
def get_weight():
    """
    Cho ph√©p client l·∫•y c√¢n hi·ªán t·∫°i
    """
    if current_weight is None:
        return jsonify({"weight": None, "message": "Ch∆∞a c√≥ d·ªØ li·ªáu c√¢n"})
    return jsonify({"weight": current_weight})


@socketio.on('connect')
def on_connect():
    print("üîó Web client ƒë√£ k·∫øt n·ªëi!")
    emit('connected', {'message': 'WebSocket connected!'})


@socketio.on('disconnect')
def on_disconnect():
    print("‚ùå Web client ng·∫Øt k·∫øt n·ªëi!")


def weight_broadcast_thread():
    """
    Thread g·ª≠i d·ªØ li·ªáu c√¢n ƒë·ªãnh k·ª≥ cho t·∫•t c·∫£ client WebSocket
    """
    while True:
        time.sleep(SEND_INTERVAL)
        with lock:
            weight = current_weight
        if weight is not None:
            socketio.emit('new_weight', {'weight': weight})
            

if __name__ == '__main__':
    # Kh·ªüi ch·∫°y thread g·ª≠i d·ªØ li·ªáu li√™n t·ª•c
    threading.Thread(target=weight_broadcast_thread, daemon=True).start()
    socketio.run(app, host='0.0.0.0', port=5000)
